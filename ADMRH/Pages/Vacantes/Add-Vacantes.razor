
@page "/vacantes/nueva-vacante"
@page "/vacantes/editar-vacante/{IdVacante:int}"
@using Newtonsoft.Json
@inject SweetAlertService Swal;

<div class="container-lg mt-5">
    <RadzenCard>
        <h1>Registro de vacantes</h1>
        <EditForm Model="vacante" OnValidSubmit="GuardarEditarVacantes">
            <DataAnnotationsValidator />
            <div class="row border-top">
                <div class="col">
                    <div class="form-group">
                        <label>Nombre</label>
                        <InputText class="form-control" @bind-Value="vacante.Nombre" />
                        <ValidationMessage For=@(() => vacante.Nombre) />
                    </div>
                </div>
                <div class="col">
                    <div class="form-group">
                        <label>Departamento</label>
                        <InputText class="form-control" @bind-Value="vacante.Departamento" />
                        <ValidationMessage For=@(() => vacante.Departamento) />
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <div class="form-group">
                        <label>Cargo</label>
                        <InputText class="form-control" @bind-Value="vacante.Cargo" />
                        <ValidationMessage For=@(() => vacante.Cargo) />
                    </div>
                </div>
                <div class="col">
                    <div class="form-group">
                        <label>Salario</label>
                        <InputText class="form-control" @bind-Value="vacante.Salario" />
                        <ValidationMessage For=@(() => vacante.Salario) />
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <div class="form-group">
                        <label class="mb-2">Descripcion</label>
                        <RadzenHtmlEditor @bind-Value=@vacante.Descripcion style="height: 300px; margin-bottom: 1rem;" UploadUrl="upload/image" />
                        <ValidationMessage For=@(() => vacante.Descripcion) />
                    </div>
                </div>
            </div>
            <button type="submit" class="btn btn-success mt-3">Guardar</button>
        </EditForm>
    </RadzenCard>
</div>

@code {
    public string value { get; set; } = "";

    [Parameter]
    public int? IdVacante { get; set; }


    HttpClient http = new HttpClient();
    private Response response;
    List<Vacante> vacantes;
    //protected override async Task OnInitializedAsync()
    //{
    //    if (IdVacante !=null)
    //    {
    //        response = await http.GetFromJsonAsync<Response>($"https://localhost:44322/api/Vacantes/{IdVacante}");
    //        vacante = response.vacante[0];
    //    }
    //}

    public async override Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
        IdVacante = IdVacante ?? 0;
        if (IdVacante !=0)
        {
            response = await http.GetFromJsonAsync<Response>($"https://localhost:44322/api/Vacantes/{IdVacante}");
            vacante = response.vacante[0];
            StateHasChanged();
        }
        
    }

    async Task GuardarEditarVacantes()
    {
        if (IdVacante !=0)
        {
            string json = JsonConvert.SerializeObject(vacante);
            StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
            var responses = await http.PutAsync($"https://localhost:44322/api/Vacantes/{vacante.IdVacante}", httpContent);
            response = await responses.Content.ReadFromJsonAsync<Response>();
            if (response.ok == true)
            {
                await Swal.FireAsync("¡Exito!", $"{response.mensaje}", "success");
            }
            else
            {
                await Swal.FireAsync("Oops...", $"{response.mensaje}", "error");
            }
        }
        else
        {
            vacante.IdUsuarioCreacion = 3;
            vacante.FechaCreacion = DateTime.Now.ToString("dd/MM/yyyy");
            string json = JsonConvert.SerializeObject(vacante);
            StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
            var responses = await http.PostAsync("https://localhost:44322/api/Vacantes", httpContent);
            response = await responses.Content.ReadFromJsonAsync<Response>();
            if (response.ok == true)
            {
                await Swal.FireAsync("¡Exito!", $"{response.mensaje}", "success");
            }
            else
            {
                await Swal.FireAsync("Oops...", $"{response.mensaje}", "error");
            }

           
        }
    }

    public class Response
    {
        public bool ok { get; set; }
        public List<Vacante> vacante { get; set; }
        public string? mensaje { get; set; }
    }
}
